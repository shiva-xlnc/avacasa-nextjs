/**
 * Quick Start Guide for Image Migration
 * Interactive script to help set up image migration
 */

const fs = require("fs");
const path = require("path");

function showWelcome() {
  console.log(`
üè† ===================================
   AVACASA IMAGE MIGRATION SETUP
   ===================================

Welcome! This script will help you migrate your Google Drive property images 
to Cloudinary for production use.

Based on your folder structure:
üìÅ Property Data/
   ‚îú‚îÄ‚îÄ 21 Enclave by pushpam infra/
   ‚îÇ   ‚îú‚îÄ‚îÄ BATHROOM_01.jpg ‚úÖ
   ‚îÇ   ‚îú‚îÄ‚îÄ KITCHEN.jpg ‚úÖ
   ‚îÇ   ‚îî‚îÄ‚îÄ 21 Enclave-brochure.pdf ‚ùå (will be ignored)
   ‚îú‚îÄ‚îÄ 32ND Avenue/
   ‚îî‚îÄ‚îÄ [other property folders...]

The system will:
‚úÖ Scan all your property folders automatically
‚úÖ Filter only image files (ignore PDFs, docs)
‚úÖ Match with your database properties
‚úÖ Upload to Cloudinary with optimization
‚úÖ Update your database with new URLs
  `);
}

function checkRequirements() {
  console.log(`
üîç CHECKING REQUIREMENTS:
========================
  `);

  // Check if database exists
  const dbExists = fs.existsSync("prisma/dev.db");
  console.log(`üìÑ Database: ${dbExists ? "‚úÖ Found" : "‚ùå Missing"}`);

  if (!dbExists) {
    console.log(`
‚ùå Database not found! Please run:
   npm run build
   npm run import-csv
    `);
    return false;
  }

  // Check if .env exists
  const envExists = fs.existsSync(".env");
  console.log(`‚öôÔ∏è  Environment file: ${envExists ? "‚úÖ Found" : "‚ùå Missing"}`);

  // Check package.json for dependencies
  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
  const hasOptionalDeps =
    packageJson.optionalDependencies &&
    packageJson.optionalDependencies.googleapis &&
    packageJson.optionalDependencies.cloudinary;

  console.log(
    `üì¶ Dependencies: ${hasOptionalDeps ? "‚úÖ Ready" : "‚ö†Ô∏è  Need installation"}`
  );

  return dbExists;
}

function showNextSteps() {
  console.log(`
üöÄ NEXT STEPS:
==============

1. CHECK YOUR PROPERTIES:
   npm run check-properties
   
   This will show you all properties in your database and help you
   understand what will be matched with your Google Drive folders.

2. SET UP CLOUDINARY:
   ‚Ä¢ Go to https://cloudinary.com
   ‚Ä¢ Create free account (25GB storage included)
   ‚Ä¢ Get your credentials from dashboard

 3. SET UP GOOGLE DRIVE API:
    ‚Ä¢ Go to https://console.cloud.google.com
    ‚Ä¢ Create service account
    ‚Ä¢ Enable Google Drive API
    ‚Ä¢ Download credentials JSON file
    ‚Ä¢ IMPORTANT: Share your folder with service account email (NOT public sharing)

4. CONFIGURE ENVIRONMENT:
   Create .env file with:
   
   CLOUDINARY_CLOUD_NAME="your_cloud_name"
   CLOUDINARY_API_KEY="your_api_key"
   CLOUDINARY_API_SECRET="your_api_secret"
   GOOGLE_DRIVE_SERVICE_ACCOUNT="./google-drive-credentials.json"

5. INSTALL DEPENDENCIES:
   npm install googleapis cloudinary

6. RUN MIGRATION:
   npm run migrate-images

üìñ For detailed setup instructions, see:
   PRODUCTION_SETUP_GUIDE.md
  `);
}

async function showProperties() {
  try {
    console.log(`
üîç CHECKING YOUR PROPERTIES:
============================
    `);

    const { checkProperties } = require("./check-properties.js");
    await checkProperties();
  } catch (error) {
    console.log(`‚ùå Could not check properties: ${error.message}`);
    console.log(`üí° Make sure you have imported your CSV data first:
   npm run import-csv`);
  }
}

function showFolderMapping() {
  console.log(`
üóÇÔ∏è  GOOGLE DRIVE FOLDER MAPPING:
================================

Your Google Drive structure should look like:

üìÅ Property Data (ID: 1vjt3d4WgOYDjUsQEGhUl6pAkHEUU69kX)
   ‚îú‚îÄ‚îÄ 21 Enclave by pushpam infra/
   ‚îÇ   ‚îú‚îÄ‚îÄ BATHROOM_01.jpg
   ‚îÇ   ‚îú‚îÄ‚îÄ FF BEDROOM_01.jpg
   ‚îÇ   ‚îú‚îÄ‚îÄ KITCHEN.jpg
   ‚îÇ   ‚îî‚îÄ‚îÄ LIVING ROOM_01.jpg
   ‚îú‚îÄ‚îÄ 32ND Avenue/
   ‚îú‚îÄ‚îÄ 32ND Vagator Resorts/
   ‚îî‚îÄ‚îÄ [more properties...]

The migration script will:
1. Scan all folders in "Property Data"
2. Try to match folder names with your database properties
3. Process only image files in each folder
4. Upload to Cloudinary with optimization

üéØ SMART MATCHING:
The script uses intelligent matching to connect Google Drive folders
with your database properties. It tries multiple strategies:
‚Ä¢ Exact slug match
‚Ä¢ Title contains folder name  
‚Ä¢ Partial keyword matching

If automatic matching fails, you can add manual mappings in the script.
  `);
}

function showCosts() {
  console.log(`
üí∞ COST BREAKDOWN:
==================

üÜì CLOUDINARY FREE TIER:
   ‚Ä¢ 25 GB storage
   ‚Ä¢ 25 GB bandwidth/month
   ‚Ä¢ 25,000 transformations/month
   ‚Ä¢ Perfect for most real estate websites

üìä FOR YOUR WEBSITE:
   ‚Ä¢ Estimated 50 properties √ó 8 images = 400 images
   ‚Ä¢ ~2-5 GB storage (with optimization)
   ‚Ä¢ Monthly bandwidth depends on traffic
   ‚Ä¢ Should stay within free tier easily

üöÄ BENEFITS:
   ‚Ä¢ Global CDN = faster loading worldwide
   ‚Ä¢ Automatic optimization = smaller file sizes
   ‚Ä¢ WebP conversion = better compression
   ‚Ä¢ Responsive images = mobile-friendly
   ‚Ä¢ 99.9% uptime SLA

Alternative: AWS S3 costs ~$1-5/month for similar usage.
  `);
}

function showMenu() {
  console.log(`
üìã WHAT WOULD YOU LIKE TO DO?
=============================

1. Check my database properties
2. Show Google Drive folder mapping
3. Show cost breakdown
4. Show detailed setup steps
5. Exit

Choose an option (1-5): `);
}

async function runInteractive() {
  const readline = require("readline");
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const ask = (question) =>
    new Promise((resolve) => rl.question(question, resolve));

  while (true) {
    showMenu();
    const choice = await ask("");

    switch (choice.trim()) {
      case "1":
        await showProperties();
        break;
      case "2":
        showFolderMapping();
        break;
      case "3":
        showCosts();
        break;
      case "4":
        showNextSteps();
        break;
      case "5":
        console.log("\nüëã Good luck with your migration!");
        rl.close();
        return;
      default:
        console.log("Please choose 1-5");
    }

    await ask("\nPress Enter to continue...");
  }
}

async function main() {
  const args = process.argv.slice(2);

  if (args.includes("--help") || args.includes("-h")) {
    console.log(`
üè† AVACASA IMAGE MIGRATION QUICK START

USAGE:
  npm run quick-start              # Interactive guide
  node scripts/quick-start.js      # Direct execution
  npm run quick-start --check      # Just check requirements
  npm run quick-start --steps      # Show next steps only

DESCRIPTION:
  This interactive guide helps you set up image migration from 
  Google Drive to Cloudinary for production use.
    `);
    return;
  }

  showWelcome();

  if (args.includes("--check")) {
    checkRequirements();
    return;
  }

  if (args.includes("--steps")) {
    showNextSteps();
    return;
  }

  const requirementsOk = checkRequirements();

  if (!requirementsOk) {
    console.log(`\n‚ùå Please fix the requirements above before continuing.`);
    return;
  }

  await runInteractive();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { showWelcome, checkRequirements, showNextSteps };
