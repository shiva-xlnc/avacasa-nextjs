
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  active: 'active',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  avatar: 'avatar',
  provider: 'provider',
  providerId: 'providerId',
  verified: 'verified',
  active: 'active',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  action: 'action',
  resource: 'resource',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  createdAt: 'createdAt'
};

exports.Prisma.UserFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  userId: 'userId',
  rating: 'rating',
  review: 'review',
  name: 'name',
  email: 'email',
  verified: 'verified',
  helpful: 'helpful',
  status: 'status',
  adminNotes: 'adminNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailSubscriberScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  source: 'source',
  interests: 'interests',
  active: 'active',
  verified: 'verified',
  subscribedAt: 'subscribedAt',
  unsubscribedAt: 'unsubscribedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  coordinates: 'coordinates',
  highlights: 'highlights',
  amenities: 'amenities',
  featured: 'featured',
  propertyCount: 'propertyCount',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  price: 'price',
  locationId: 'locationId',
  propertyType: 'propertyType',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  area: 'area',
  floors: 'floors',
  images: 'images',
  amenities: 'amenities',
  features: 'features',
  coordinates: 'coordinates',
  status: 'status',
  featured: 'featured',
  active: 'active',
  unitConfiguration: 'unitConfiguration',
  aboutProject: 'aboutProject',
  legalApprovals: 'legalApprovals',
  registrationCosts: 'registrationCosts',
  propertyManagement: 'propertyManagement',
  financialReturns: 'financialReturns',
  investmentBenefits: 'investmentBenefits',
  nearbyInfrastructure: 'nearbyInfrastructure',
  plotSize: 'plotSize',
  constructionStatus: 'constructionStatus',
  possessionDate: 'possessionDate',
  emiOptions: 'emiOptions',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  tags: 'tags',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  userId: 'userId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  preferredDate: 'preferredDate',
  visitType: 'visitType',
  budget: 'budget',
  status: 'status',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  author: 'author',
  category: 'category',
  tags: 'tags',
  featuredImage: 'featuredImage',
  featured: 'featured',
  active: 'active',
  publishedAt: 'publishedAt',
  status: 'status',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactSubmissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  message: 'message',
  type: 'type',
  source: 'source',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteSettingsScalarFieldEnum = {
  id: 'id',
  data: 'data',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageViewScalarFieldEnum = {
  id: 'id',
  path: 'path',
  userId: 'userId',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  createdAt: 'createdAt'
};

exports.Prisma.SearchQueryScalarFieldEnum = {
  id: 'id',
  query: 'query',
  filters: 'filters',
  results: 'results',
  userId: 'userId',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AdminRole = exports.$Enums.AdminRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  EDITOR: 'EDITOR'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  PAGE_VIEW: 'PAGE_VIEW',
  PAGE_EXIT: 'PAGE_EXIT',
  SCROLL_DEPTH: 'SCROLL_DEPTH',
  PROPERTY_VIEW: 'PROPERTY_VIEW',
  PROPERTY_SEARCH: 'PROPERTY_SEARCH',
  PROPERTY_INQUIRY: 'PROPERTY_INQUIRY',
  PROPERTY_FAVORITE: 'PROPERTY_FAVORITE',
  LOCATION_VIEW: 'LOCATION_VIEW',
  BLOG_VIEW: 'BLOG_VIEW',
  BUTTON_CLICK: 'BUTTON_CLICK',
  LINK_CLICK: 'LINK_CLICK',
  CTA_CLICK: 'CTA_CLICK',
  FORM_START: 'FORM_START',
  FORM_COMPLETE: 'FORM_COMPLETE',
  DOWNLOAD: 'DOWNLOAD',
  USER_REGISTER: 'USER_REGISTER',
  USER_LOGIN: 'USER_LOGIN',
  EMAIL_SUBSCRIBE: 'EMAIL_SUBSCRIBE',
  CONTACT_SUBMIT: 'CONTACT_SUBMIT'
};

exports.RatingStatus = exports.$Enums.RatingStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  FLAGGED: 'FLAGGED'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  HOLIDAY_HOME: 'HOLIDAY_HOME',
  FARMLAND: 'FARMLAND',
  PLOT: 'PLOT',
  VILLA: 'VILLA',
  APARTMENT: 'APARTMENT',
  RESIDENTIAL_PLOT: 'RESIDENTIAL_PLOT'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  AVAILABLE: 'AVAILABLE',
  SOLD: 'SOLD',
  UNDER_CONSTRUCTION: 'UNDER_CONSTRUCTION',
  COMING_SOON: 'COMING_SOON'
};

exports.VisitType = exports.$Enums.VisitType = {
  SITE_VISIT: 'SITE_VISIT',
  VIRTUAL_TOUR: 'VIRTUAL_TOUR',
  OFFICE_MEETING: 'OFFICE_MEETING',
  CALL_BACK: 'CALL_BACK'
};

exports.InquiryStatus = exports.$Enums.InquiryStatus = {
  NEW: 'NEW',
  CONTACTED: 'CONTACTED',
  SCHEDULED: 'SCHEDULED',
  VISITED: 'VISITED',
  INTERESTED: 'INTERESTED',
  NEGOTIATING: 'NEGOTIATING',
  CLOSED_WON: 'CLOSED_WON',
  CLOSED_LOST: 'CLOSED_LOST'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.ContactType = exports.$Enums.ContactType = {
  GENERAL: 'GENERAL',
  SALES: 'SALES',
  SUPPORT: 'SUPPORT',
  PARTNERSHIP: 'PARTNERSHIP',
  PHONE_INQUIRY: 'PHONE_INQUIRY'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  NEW: 'NEW',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  User: 'User',
  UserSession: 'UserSession',
  UserActivity: 'UserActivity',
  UserFavorite: 'UserFavorite',
  Rating: 'Rating',
  EmailSubscriber: 'EmailSubscriber',
  Location: 'Location',
  Property: 'Property',
  Inquiry: 'Inquiry',
  BlogPost: 'BlogPost',
  ContactSubmission: 'ContactSubmission',
  SiteSettings: 'SiteSettings',
  PageView: 'PageView',
  SearchQuery: 'SearchQuery'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
